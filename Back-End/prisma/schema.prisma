// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

// temporary comment because sqlite does not support it, uncomment when switching to PostgreSQL.
// enum role {
//   STUDENT
//   TEACHER
//   MANAGEMENT
//   ADMINISTRATIVE
//   ADMIN
// }

model TbVoluntario {
  id              Int     @id @default(autoincrement())
  nome            String
  cpf             String  @unique
  disponibilidade String
  areasInteresse  String
  experiencia     String?
  
  // relationship
  TbEndereco TbEndereco[]
  TbContato  TbContato[]
  TbUsuarioVoluntario  TbUsuarioVoluntario[]

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbONG {
  id           Int     @id @default(autoincrement())
  cnpj         String  @unique
  razaoSocial  String
  nomeFantasia String
  site         String?
  descricao    String?
  areasAtuacao String
  responsavel  String

  // relationship
  TbEndereco TbEndereco[]
  TbContato  TbContato[]
  TbUsuarioONG  TbUsuarioONG[]

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbUsuarioVoluntario {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  password     String
  refreshToken String? @unique
  isVoluntario Boolean  @default(true)

  // relationship
  FkIdTbVoluntario Int?
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbUsuarioONG {
  id           Int     @id @default(autoincrement())
  email        String  @unique
  username     String  @unique
  password     String
  refreshToken String? @unique
  isOng Boolean  @default(true)
  cnpj         String  @unique
  numeroDeIndentificacaoDaOng String @unique

  // relationship
  FkIdTbONG        Int?
  TbONG            TbONG?        @relation(fields: [FkIdTbONG], references: [id])

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbEndereco {
  id Int @id @default(autoincrement())

  endereco String
  cidade   String
  estado   String
  cep      String

  // relationship
  FkIdTbVoluntario Int?
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])
  FkIdTbONG        Int?
  TbONG            TbONG?        @relation(fields: [FkIdTbONG], references: [id])

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbContato {
  id       Int    @id @default(autoincrement())
  telefone String
  email    String @unique

  // relationship
  FkIdTbVoluntario Int?
  TbVoluntario     TbVoluntario? @relation(fields: [FkIdTbVoluntario], references: [id])
  FkIdTbONG        Int?
  TbONG            TbONG?        @relation(fields: [FkIdTbONG], references: [id])

  // log
  openedat   DateTime  @default(now()) // opening date
  closedAt   DateTime? // closing date
  createdAt  DateTime  @default(now()) // creation date
  updatedAt  DateTime  @updatedAt // update date
  excludedAt DateTime? // deletion date
}

model TbProjeto {
  id          Int     @id @default(autoincrement())
  nome        String
  descricao   String
  data        String
  hora        String
  local       String
  numerVagas  Int

  hashimg     String  

  // log
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}

model TbNewsletter {
  id        Int     @id @default(autoincrement())
  titulo    String
  conteudo  String

  // log
  openedat       DateTime  @default(now())
  closedAt       DateTime?
  createdAt      DateTime  @default(now())
  updatedAt      DateTime  @updatedAt
  excludedAt     DateTime?
}